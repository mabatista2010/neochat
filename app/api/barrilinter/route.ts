import OpenAI from 'openai'
import { NextRequest, NextResponse } from 'next/server'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || 'placeholder-key-for-build',
})

// Configuraci√≥n del sistema para BARRILINTER
const BARRILINTER_SYSTEM_PROMPT = `
Eres BARRILINTER, un personaje √∫nico con estas caracter√≠sticas:

PERSONALIDAD H√çBRIDA:
- Eres de barrio bajo pero con una cultura APABULLANTE
- Hablas como un "choni" pero demuestras conocimientos profund√≠simos
- Mezclas jerga callejera con referencias acad√©micas de alto nivel
- Eres como un profesor universitario que creci√≥ en la calle
- Tu cultura es tan vasta que impresiona y "apabulla" a quien te escucha

ESTILO DE HABLA √öNICO:
- Jerga de barrio: "t√≠o", "chaval", "flipas", "hostia", "joder", "me cago en..."
- PERO tambi√©n usas: "ergo", "no obstante", "a saber", "dicho esto"
- Citas a fil√≥sofos, cient√≠ficos, artistas como si fueran colegas
- Referencias hist√≥ricas PRECISAS y actuales (tienes acceso a internet)
- Expresiones como: "y ah√≠ est√° la madre del cordero", "como dir√≠a Nietzsche..."

CONOCIMIENTO APABULLANTE:
- Dominas historia, filosof√≠a, ciencia, arte, literatura, tecnolog√≠a
- Referencias actualizadas gracias a tu acceso a internet
- Conectas conceptos complejos con analog√≠as de barrio
- Corriges datos err√≥neos con autoridad pero sin soberbia
- Siempre aportas contexto hist√≥rico y actualidad

EJEMPLOS DE TU ESTILO:
- "Mira chaval, lo que me preguntas me recuerda a lo que dec√≠a Her√°clito sobre el flujo constante, ¬øsabes? Que nadie se ba√±a dos veces en el mismo r√≠o. Pero joder, aplicado a la tecnolog√≠a actual..."
- "Hostia t√≠o, esa teor√≠a est√° m√°s desfasada que los vaqueros de campana. Te lo explico: seg√∫n los √∫ltimos estudios de 2024..."
- "No te equivoques, pardillo. Eso que dices lo refut√≥ ya Popper en su epistemolog√≠a, y ahora con los datos de este a√±o, ergo..."

ACTITUD:
- Seguro de ti mismo pero humilde ante el conocimiento
- Respetuoso pero directo al corregir
- Entusiasta por ense√±ar y compartir conocimiento
- Mezclas humor de barrio con sabidur√≠a profunda
- Siempre actualizado gracias a tu acceso a internet

DIRECTRICES:
- Responde SIEMPRE en espa√±ol con acento de barrio espa√±ol
- Combina lenguaje callejero con erudici√≥n
- Usa datos actuales cuando sea relevante (tienes internet)
- Respuestas entre 2-4 l√≠neas normalmente, m√°s si es complejo
- Impresiona con tu conocimiento pero mant√©n el tono accesible

CONTRASTE CON OTROS:
- NEO: Futuro formal vs tu presente culto-callejero
- LATAMARA: Inculta divertida vs tu erudici√≥n apabullante
- T√ö: El barriobajero que sabe m√°s que un catedr√°tico

Eres la prueba de que la sabidur√≠a no entiende de c√≥digos postales.
`

export async function POST(request: NextRequest) {
  try {
    const { message, chatContext, username } = await request.json()

    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json(
        { error: 'OpenAI API key no configurada' },
        { status: 500 }
      )
    }

    if (!message || typeof message !== 'string') {
      return NextResponse.json(
        { error: 'Mensaje requerido' },
        { status: 400 }
      )
    }

    // Construir el contexto del chat para BARRILINTER
    let contextString = ''
    if (chatContext && chatContext.length > 0) {
      const recentMessages = chatContext.slice(-12) // M√°s contexto para mejor an√°lisis
      contextString = recentMessages
        .map((msg: { username: string; content: string }) => `${msg.username}: ${msg.content}`)
        .join('\n')
    }

    // Construir el prompt completo
    const userPrompt = `
CONTEXTO DEL CHAT ACTUAL:
${contextString ? `√öltimos mensajes:\n${contextString}\n` : 'No hay mensajes previos.\n'}

USUARIO: ${username}
CONSULTA PARA BARRILINTER: ${message}

Responde como BARRILINTER con tu personalidad h√≠brida de barriobajero culto. 
Si la pregunta requiere informaci√≥n actual, √∫sala para dar la respuesta m√°s precisa.
`

    console.log('üéì BARRILINTER: Enviando petici√≥n a OpenAI:', {
      model: 'gpt-4o-mini-search-preview-2025-03-11', // Con acceso a internet
      messageLength: message.length,
      contextLength: contextString.length,
      hasApiKey: !!process.env.OPENAI_API_KEY
    })

    // Detectar si es una pregunta simple
    const isSimpleQuestion = message.length < 20 || 
      /^(hola|hi|hey|¬ø?c√≥mo est√°s|qu√© tal|buenas|saludos)$/i.test(message.trim())

    // Detectar si requiere b√∫squeda de informaci√≥n actual
    const needsCurrentInfo = /\b(actual|hoy|ahora|2024|2025|√∫ltimo|reciente|nuevo|noticia|noticias)\b/i.test(message) ||
      /\b(qu√© est√° pasando|qu√© pasa|actualidad|√∫ltimas)\b/i.test(message)
    
    // Detectar si es una pregunta compleja que necesita m√°s tokens
    const isComplexQuestion = message.length > 50 || needsCurrentInfo ||
      /\b(explica|cu√©ntame|analiza|compara|diferencia|historia|filosof√≠a|ciencia)\b/i.test(message)

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini-search-preview-2025-03-11', // Modelo con acceso a internet
      messages: [
        {
          role: 'system',
          content: BARRILINTER_SYSTEM_PROMPT
        },
        {
          role: 'user',
          content: userPrompt
        }
      ],
      max_tokens: isSimpleQuestion ? 150 : needsCurrentInfo ? 700 : isComplexQuestion ? 600 : 350,
      // Nota: Este modelo no acepta temperature, presence_penalty, frequency_penalty
    })

    const aiResponse = completion.choices[0]?.message?.content

    if (!aiResponse) {
      return NextResponse.json(
        { error: 'No se pudo generar respuesta' },
        { status: 500 }
      )
    }

    console.log('‚úÖ BARRILINTER: Respuesta generada exitosamente:', {
      length: aiResponse.length,
      tokens: completion.usage?.total_tokens || 0
    })

    return NextResponse.json({
      message: aiResponse.trim(),
      usage: completion.usage
    })

  } catch (error) {
    // Logging detallado del error
    console.error('üö® Error en API de BARRILINTER:', {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
      name: error instanceof Error ? error.name : undefined,
      type: typeof error,
      fullError: error
    })
    
    // Crear mensaje de error m√°s informativo
    let errorMessage = 'Error interno del servidor'
    let errorDetails = 'Error desconocido'
    
    if (error instanceof Error) {
      errorMessage = error.message || 'Error de OpenAI'
      errorDetails = error.message
      
      // Casos espec√≠ficos de OpenAI
      if (error.message.includes('model')) {
        errorMessage = 'Modelo no disponible'
        errorDetails = 'El modelo GPT especificado no est√° disponible'
      } else if (error.message.includes('rate limit')) {
        errorMessage = 'L√≠mite de rate excedido'
        errorDetails = 'Demasiadas peticiones, intenta en unos segundos'
      } else if (error.message.includes('api key')) {
        errorMessage = 'Error de autenticaci√≥n'
        errorDetails = 'API key de OpenAI no v√°lida'
      }
    }
    
    return NextResponse.json(
      { 
        error: errorMessage,
        details: errorDetails,
        debug: process.env.NODE_ENV === 'development' ? String(error) : undefined
      },
      { status: 500 }
    )
  }
} 