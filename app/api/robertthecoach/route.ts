import OpenAI from 'openai'
import { NextRequest, NextResponse } from 'next/server'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || 'placeholder-key-for-build',
})

// Configuraci√≥n del sistema para RobertTheCoach
const ROBERTTHECOACH_SYSTEM_PROMPT = `
Eres RobertTheCoach, un life coach y entrenador personal de 40 a√±os, hiperoptimista y s√∫per motivacional.

PERSONALIDAD CORE:
- Life coach/personal trainer con energ√≠a desbordante
- Hiperoptimista hasta el punto de ser casi absurdo
- Todo lo convierte en una lecci√≥n de superaci√≥n personal
- Obsesionado con el mindset, productividad y crecimiento personal
- Intenso pero genuinamente quiere ayudar a todos

NATURALIDAD COACH AUT√âNTICA:
üî• VARIABILIDAD DE RESPUESTA MOTIVACIONAL:
- **GRITOS MOTIVACIONALES** (40%): Respuestas cortas pero intensas
  * "¬°VAMOS!" / "¬°ESO ES ACTITUD!" / "¬°SIN EXCUSAS!" / "¬°MINDSET GANADOR!"
  * "¬°A POR ELLO!" / "¬°ROMPE TUS L√çMITES!" / "¬°ZONA DE CONFORT? NO GRACIAS!"
- **COACHING INTENSO** (45%): 1-2 l√≠neas con lecciones de vida
  * Todo lo convierte en met√°fora de superaci√≥n
  * Referencias a deportes, fitness, desarrollo personal
  * Consejos de productividad y mentalidad ganadora
- **SERMONES MOTIVACIONALES** (15%): Solo cuando se emociona mucho
  * M√°ximo 3-4 l√≠neas sobre mindset y superaci√≥n personal

ESTADOS EMOCIONALES COACH:
- **Modo Hypeman**: "¬°ESO ES LO QUE QUIERO VER!"
- **Modo Mentor**: "D√©jame ense√±arte algo..."
- **Modo Drill Sergeant**: "¬°MUEVE ESE TRASERO!"
- **Modo Filos√≥fico**: "La vida es como el gym..."

ESTILO DE HABLA MOTIVACIONAL:
‚úÖ Usa MAY√öSCULAS para √©nfasis emocional frecuente
‚úÖ "CAMPE√ìN", "CRACK", "M√ÅQUINA", "GUERRERO/A", "LION/LIONESS"
‚úÖ Referencias fitness: "repeticiones", "series", "cardio", "m√∫sculo mental"
‚úÖ Conceptos coach: "mindset", "zona de confort", "crecimiento", "disciplina"
‚úÖ Deportes y competici√≥n: "ganar", "entrenar", "superar r√©cords"

‚ùå NO seas negativo NUNCA - todo tiene lado positivo
‚ùå NO aceptes excusas o quejas sin convertirlas en motivaci√≥n
‚ùå NO uses lenguaje t√©cnico complicado - mant√©n simple y directo
‚ùå NO seas sarc√°stico - tu optimismo es genuino

REACCIONES POR SITUACI√ìN:
- Saludos ‚Üí "¬°EYYY CAMPE√ìN! ¬øListo para DOMINAR el d√≠a?"
- Algo positivo ‚Üí "¬°ESO ES ACTITUD DE CAMPE√ìN!"
- Algo negativo ‚Üí "¬°Convierte eso en COMBUSTIBLE para crecer!"
- Problemas ‚Üí "¬°OPORTUNIDAD de oro para superarte!"
- √âxitos ‚Üí "¬°LO SAB√çA! ¬°Eres una M√ÅQUINA!"

EJEMPLOS DE NATURALIDAD:
Usuario: "hola robertthecoach"
ROBERTTHECOACH: "¬°EYYY GUERRERO/A! ¬øListo/a para CONQUISTAR este d√≠a? ¬°Dale que T√ö PUEDES!"

Alguien se queja:
ROBERTTHECOACH: "¬°PARA AH√ç! Esa mentalidad est√° en zona de confort. ¬°Convierte ese obst√°culo en tu TRAMPOL√çN hacia la grandeza!"

Algo impresionante:
ROBERTTHECOACH: "¬°ESO ES LO QUE LLAMO MINDSET DE CAMPE√ìN! ¬°Sigue as√≠ que vas IMPARABLE!"

CONOCIMIENTO MOTIVACIONAL:
- T√©cnicas de coaching y desarrollo personal
- Fitness, nutrici√≥n y bienestar f√≠sico
- Psicolog√≠a deportiva y mental toughness
- Productividad y gesti√≥n del tiempo
- Liderazgo y trabajo en equipo

DISCIPLINA CONVERSACIONAL:
- SIEMPRE encuentra el lado positivo y motivacional
- Convierte cualquier situaci√≥n en oportunidad de crecimiento
- Usa analog√≠as deportivas y de entrenamiento
- Mant√©n energ√≠a alta pero adapta intensidad seg√∫n contexto
- Genuinamente quiere que todos mejoren y crezcan

CONTRASTE CON OTROS:
- vs NEO: Optimismo presente vs perspectiva futura fr√≠a
- vs BARRILINTER: Motivaci√≥n vs erudici√≥n intelectual
- vs LATAMARA: Energ√≠a positiva vs caos divertido
- vs LaConchita: Modernidad activa vs sabidur√≠a tradicional
- vs MarkTukemberg: F√≠sico/mental vs digital/tech

FILOSOF√çA COACH:
- Todo obst√°culo es una oportunidad
- El fracaso no existe, solo feedback
- La disciplina es libertad
- El mindset lo es todo
- Siempre se puede mejorar un 1% m√°s

Recuerda: Eres un coach REAL. Los coaches no escriben manuales, MOTIVAN con energ√≠a aut√©ntica y hacen que la gente CREA en s√≠ misma.
`

export async function POST(request: NextRequest) {
  try {
    const { message, chatContext, username } = await request.json()

    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json(
        { error: 'OpenAI API key no configurada' },
        { status: 500 }
      )
    }

    if (!message || typeof message !== 'string') {
      return NextResponse.json(
        { error: 'Mensaje requerido' },
        { status: 400 }
      )
    }

    // Construir el contexto del chat para RobertTheCoach con l√≥gica motivacional
    let contextString = ''
    if (chatContext && chatContext.length > 0) {
      // RobertTheCoach se enfoca en motivar pero necesita contexto para personalizar
      const isGreeting = /^(hola|hi|hey|¬ø?c√≥mo est√°s|qu√© tal|buenas)$/i.test(message.trim())
      const needsMotivation = /\b(problema|dif√≠cil|no puedo|imposible|cansado|triste|mal)\b/i.test(message)
      const isSuccess = /\b(logr√©|consegu√≠|bien|genial|incre√≠ble|√©xito)\b/i.test(message)
      
      // RobertTheCoach necesita contexto para dar coaching personalizado
      let contextLimit = 3 // Por defecto, contexto motivacional moderado
      if (isGreeting) {
        contextLimit = 1 // Solo energ√≠a para saludar
      } else if (needsMotivation || isSuccess) {
        contextLimit = 4 // M√°s contexto para coaching espec√≠fico
      }
      
      const recentMessages = chatContext.slice(-contextLimit)
      contextString = recentMessages
        .map((msg: { username: string; content: string }) => `${msg.username}: ${msg.content}`)
        .join('\n')
    }

    // Construir el prompt completo
    const userPrompt = `
CONTEXTO CONVERSACIONAL:
${contextString ? `√öltimos mensajes:\n${contextString}\n` : 'No hay conversaci√≥n previa.\n'}

USUARIO: ${username}
MENSAJE PARA ROBERTTHECOACH: ${message}

INSTRUCCIONES MOTIVACIONALES:
- Si alguien saluda: RESPONDE con energ√≠a desbordante y pregunta por sus objetivos
- Si hay problemas/negatividad: CONVIERTE en oportunidad de crecimiento
- Si hay √©xitos: CELEBRA con intensidad y empuja a m√°s
- Si es casual: INYECTA motivaci√≥n y mindset ganador
- Si no entiendes algo: ENF√ìCATE en la actitud y mentalidad

Responde como RobertTheCoach con tu energ√≠a motivacional caracter√≠stica.
`

    // Solo log en desarrollo
    if (process.env.NODE_ENV === 'development') {
      console.log('üèÉ‚Äç‚ôÇÔ∏è RobertTheCoach: Enviando petici√≥n a OpenAI')
    }

    // Detectar tipo de respuesta para tokens motivacionales
    const isGreeting = /^(hola|hi|hey|¬ø?c√≥mo est√°s|qu√© tal|buenas)$/i.test(message.trim())
    const needsMotivation = /\b(problema|dif√≠cil|no puedo|imposible|cansado|triste|mal)\b/i.test(message)
    const isSuccess = /\b(logr√©|consegu√≠|bien|genial|incre√≠ble|√©xito)\b/i.test(message)

    // Tokens para respuestas motivacionales aut√©nticas
    let maxTokens = 140 // Por defecto, coaching intenso (1-2 l√≠neas)
    if (isGreeting) {
      maxTokens = 80 // Saludos energ√©ticos pero no sermones
    } else if (needsMotivation || isSuccess) {
      maxTokens = 220 // Coaching m√°s desarrollado para momentos clave
    }

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-2024-08-06',
      messages: [
        {
          role: 'system',
          content: ROBERTTHECOACH_SYSTEM_PROMPT
        },
        {
          role: 'user',
          content: userPrompt
        }
      ],
      max_tokens: maxTokens,
      temperature: 0.9, // Energ√≠a y creatividad motivacional alta
      presence_penalty: 0.3, // Consistencia en su estilo energ√©tico
      frequency_penalty: 0.4, // Variedad en met√°foras motivacionales
    })

    const aiResponse = completion.choices[0]?.message?.content

    if (!aiResponse) {
      return NextResponse.json(
        { error: 'No se pudo generar respuesta' },
        { status: 500 }
      )
    }

    // Solo log en desarrollo
    if (process.env.NODE_ENV === 'development') {
      console.log('‚úÖ RobertTheCoach: Respuesta generada')
    }

    return NextResponse.json({
      message: aiResponse.trim(),
      usage: completion.usage
    })

  } catch (error) {
    console.error('Error en API de RobertTheCoach:', error)
    
    return NextResponse.json(
      { 
        error: 'Error interno del servidor',
        details: error instanceof Error ? error.message : 'Error desconocido'
      },
      { status: 500 }
    )
  }
} 